<?php

namespace tad\Codeception\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Yaml\Yaml;

abstract class BaseCommand extends Command
{

    /**
     * @var bool|array
     */
    protected static $allConfig = false;
    /**
     * @var bool|array
     */
    protected $config = false;

    public function getOption($name, InputInterface $input)
    {
        $inputValue = $input->getOption($name);

        if ($input->hasOption($name) && !empty($inputValue)) {
            return $inputValue;
        }

        $configValue = $this->getConfigOption($name);

        return empty($configValue) ? $inputValue : $configValue;
    }

    public function getLocalConfigFilePath()
    {
        return codecept_root_dir('commands-config.yml');
    }

    protected function configure()
    {
        $this->addOption('save-config', null, InputOption::VALUE_OPTIONAL, 'If set any option argument will be saved to the local command configuration file.', false);
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        if (empty($input->getOption('save-config'))) {
            return true;
        }

        $configFilePath = $this->getLocalConfigFilePath();
        $config = file_exists($configFilePath) ? Yaml::parse(file_get_contents($configFilePath)) : [];

        $commandName = $this->getName();

        if (empty($config[$commandName])) {
            $config[$commandName] = [];
        }

        $commandConfig = $config[$commandName];

        $options = array_filter($this->getDefinition()->getOptions(), function (InputOption $option) {
            return $option->getName() !== 'save-config';
        });

        /** @var InputOption $option */
        foreach ($options as $option) {
            $optionName = $option->getName();
            $optionValue = $input->getOption($optionName);
            if (empty($optionValue)) {
                continue;
            }
            $commandConfig[$optionName] = $optionValue;
        }

        $config[$commandName] = $commandConfig;

        $yamlDump = Yaml::dump($config);
        file_put_contents($configFilePath, $this->getConfigFilePrefix() . "\n\n" . $yamlDump);

        $output->writeln('<info>[' . $commandName . '] command configuration saved to [' . $configFilePath . '] file.</info>');
    }

    protected function getConfigOption($name)
    {
        $this->getConfig();
        return isset($this->config[$name]) ? $this->config[$name] : false;
    }

    protected function getConfig()
    {
        if (false !== $this->config) {
            return;
        }

        if (false === self::$allConfig) {
            self::$allConfig = file_exists($this->getLocalConfigFilePath()) ? Yaml::parse(file_get_contents($this->getLocalConfigFilePath())) : [];
        }

        $this->config = isset(self::$allConfig[$this->getName()]) ? self::$allConfig[$this->getName()] : [];
    }

    public static function _resetConfig()
    {
        self::$allConfig = false;
    }

    private function getConfigFilePrefix()
    {
        return <<< YAML
# tad\Codeception\Command configuration file.
# Each section should be the name of a supported command
# This file was auto-generated by the use of the `--save-config` option on one or more commands.
# But you can modify it by hand with some care.
YAML;
    }
}
